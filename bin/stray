#!/bin/bash
set -e

bin_dir="$HOME/.stray/env/bin"

absolute_path() {
    echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

label-subcommand() {
    if [ $# -lt 2 ]
        then
            echo "Not enough arguments supplied"
            exit 1
    fi

    if [ "$2" = "generate" ]
    then
        $bin_dir/stray-label-generate "${@:3}"
    elif [ "$2" = "show" ]
    then
        $bin_dir/stray-label-show "${@:3}"
    else
        echo "Incorrect verb"
    fi
}

model-subcommand() {
    if [ $# -lt 2 ]
        then
            echo "Not enough arguments supplied"
            exit 1
    fi
    if [ "$2" = "generate" ]
    then
        $bin_dir/stray-model-generate "${@:3}"
    elif [ "$2" = "bake" ]
    then
        i=0
        args=("$@")
        for arg in "$@"
        do
            if [ "${args[i]}" = "--model" ]
            then
                model=${args[i+1]}
            elif [ "${args[i]}" = "--dataset" ]
            then
                dataset=${args[i+1]}
            elif [ "${args[i]}" = "--num-gpus" ]
            then
                gpus=${args[i+1]}
            elif [ "${args[i]}" = "--resume" ]
            then
                resume=true
            fi
            i=$((i + 1))
        done

        if [ $resume ]
        then
            docker run -v $dataset:/root/workspace/data -v $model:/root/workspace/detectron2-model --gpus all -it  strayrobots/detectron2:latest \
            --dataset /root/workspace/data \
            --model /root/workspace/detectron2-model \
            --num-gpus $gpus
            --resume
        else
            docker run -v $dataset:/root/workspace/data -v $model:/root/workspace/detectron2-model --gpus all -it  strayrobots/detectron2:latest \
            --dataset /root/workspace/data \
            --model /root/workspace/detectron2-model \
            --num-gpus $gpus
        fi
    elif [ "$2" = "evaluate" ]
    then
        $bin_dir/stray-model-evaluate "${@:3}"
    else
        echo "Incorrect verb"
    fi
}

studio-integrate() {
    i=$((i + 1))
    args=("$@")
    for arg in "$@"
    do
        if [ "${args[i]}" = "--settings" ]
        then
            settings=${args[i+1]}
        fi
        i=$((i + 1))
    done
    if [ -n "$settings" ]
    then
        docker run -it -v $scene_dir:/home/user/data strayrobots/integrate:latest --settings $settings
    else
        docker run -it -v $scene_dir:/home/user/data strayrobots/integrate:latest
    fi
}

studio-subcommand() {
    scene_dir="$(absolute_path $3)"
    if [ ! -d "$scene_dir" ]; then
        echo "data directory does not exist: $scene_dir"
        exit 1
    fi

    if [ "$2" = "integrate" ]
    then
        shift
        studio-integrate $scene_dir $@
    elif [ "$2" = "open" ]
    then
        studio $scene_dir
    else
        echo "Verb $2 not supported by studio subcommand."
        exit 1
    fi
}

calibration-subcommand() {
    if [ "$2" = "run" ]
    then
        #TODO: input and parse these as flags and not positional arguments.
        scene_dir="$(absolute_path $3)"
        target_yaml=$4
        if [ "$target_yaml" = "" ] || [ "$scene_dir" = "" ]; then
            echo "Both scene and target needs to be provided."
            echo ""
            echo "Usage: stray calibration run <calibration-scene> <target.yaml>"
            exit 1
        fi
        docker run -it -v $scene_dir:/root/data/ \
            -v $target_yaml:/root/workspace/target.yaml strayrobots/calibrate:latest run
    elif [ "$2" = "generate" ]
    then
        target_yaml=$3
        shift 2
        docker run -v `pwd`:/root/data/ \
            -v $target_yaml:/root/workspace/target.yaml strayrobots/calibrate:latest generate
    elif [ "$2" = "scale" ]
    then
        shift 2
        $bin_dir/straylib-scale-calibration $@
    else
        "Verb $2 not supported by calibration subcommand. Try run or generate."
        exit 1
    fi
}

dataset-subcommand() {
    if [ "$2" = "import" ]
    then
        shift 2
        $bin_dir/straylib-dataset-import $@
    fi
}

if [ "$1" = "label" ]
then
    label-subcommand $@
elif [ "$1" = "model" ]
then
    model-subcommand $@
elif [ "$1" = "studio" ]
then
    studio-subcommand $@
elif [ "$1" = "calibration" ]
then
    calibration-subcommand $@
elif [ "$1" = "dataset" ]
then
    dataset-subcommand $@
else
    echo "No command supplied"
fi

